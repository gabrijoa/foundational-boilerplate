# .github/workflows/ci.yml

name: Backend CI - Run Integration Tests

# GATILHOS: Quando este workflow deve rodar?
on:
  push:
    branches: [ "main" ] # Em todo push para a branch 'main'
  pull_request:
    branches: [ "main" ] # Em toda pull request aberta para a 'main'

jobs:
  # NOME DO JOB: Teremos apenas um "trabalho" a ser feito
  test-backend:
    # MÁQUINA VIRTUAL: Usará a versão mais recente do Linux Ubuntu
    runs-on: ubuntu-latest

    # SERVIÇOS: Define contêineres extras que rodam junto com o job.
    # É como um mini docker-compose para o nosso teste.
    services:
      # Nomeamos nosso serviço de banco de dados como 'postgres'
      postgres:
        image: postgres:16-alpine # A imagem Docker do banco
        # Variáveis de ambiente para o contêiner do banco de teste
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydatabase
        # Expõe a porta do contêiner para a máquina virtual (o runner)
        ports:
          - 5432:5432
        # Verificação de saúde: Garante que o job principal espere o banco estar 100% pronto
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # PASSOS: A sequência de comandos que o nosso robô irá executar
    steps:
      # Passo 1: Baixar o código do seu repositório
      - name: Checkout code
        uses: actions/checkout@v4

      # Passo 2: Configurar o ambiente Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm' # Ativa o cache para acelerar o 'npm install' futuro

      # Passo 3: Instalar todas as dependências do projeto
      - name: Install dependencies
        run: npm install

      - name: Generate Prisma Client
        run: npm run generate -w backend

      - name: Run Prisma Migrations
        run: npm run migrate:deploy -w backend
        env:
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/testdb?schema=public"

      # Passo x: Rodar os testes do backend
      - name: Run backend integration tests
        run: npm test -w backend
        # Injeta a variável de ambiente necessária para este passo
        env:
          # A URL de conexão aponta para o serviço 'postgres' que criamos acima.
          # Usamos 'localhost' porque o GitHub Actions mapeia os serviços para a rede local do runner.
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/testdb?schema=public"